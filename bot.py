import os
import logging
import asyncio
import tempfile
import shutil
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, Optional, Tuple
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ yandexMusicDownloader.py
from yandexMusicDownloader import download_track, download_album, extract_track_info

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from database import Database
from backup_utils import (
    export_backup,
    cleanup_backup,
    load_backup_file,
    restore_users,
    restore_downloads,
    BackupError,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
YM_TOKEN = os.getenv("YM_TOKEN")
BOT_TOKEN = os.getenv("BOT_TOKEN")
# –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
ADMIN_ID = os.getenv("ADMIN_ID", "218957780")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
try:
    ADMIN_ID_INT = int(ADMIN_ID) if ADMIN_ID else None
except ValueError:
    logging.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_ID –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∫–æ–º–∞–Ω–¥—ã.")
    ADMIN_ID_INT = None

DEFAULT_BACKUP_CRON = "0 9 * * MON"
DEFAULT_BACKUP_TZ = "Europe/Moscow"
BACKUP_CRON_EXPR = os.getenv("BACKUP_CRON", DEFAULT_BACKUP_CRON)
BACKUP_TZ = os.getenv("BACKUP_TZ", DEFAULT_BACKUP_TZ)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
data_dir = os.path.join(os.path.dirname(__file__), 'data')
os.makedirs(data_dir, exist_ok=True)

db = Database(os.path.join(data_dir, 'bot_database.db'))

TABLE_TITLES = {
    "users": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    "downloads": "–°–∫–∞—á–∏–≤–∞–Ω–∏—è",
}


def resolve_timezone(name: str) -> ZoneInfo:
    try:
        return ZoneInfo(name)
    except Exception as exc:
        logging.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ '%s': %s. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTC.", name, exc)
        return ZoneInfo("UTC")


def build_backup_trigger(tz: ZoneInfo) -> Tuple[CronTrigger, str]:
    try:
        cron = BACKUP_CRON_EXPR
        return CronTrigger.from_crontab(cron, timezone=tz), cron
    except ValueError as exc:
        logging.error(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ BACKUP_CRON='%s': %s. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '%s'.",
            BACKUP_CRON_EXPR,
            exc,
            DEFAULT_BACKUP_CRON,
        )
        return CronTrigger.from_crontab(DEFAULT_BACKUP_CRON, timezone=tz), DEFAULT_BACKUP_CRON


@dataclass
class RestoreSession:
    chat_id: int
    step: str
    temp_dir: Path
    prompt_message_id: Optional[int] = None
    users_restored: Optional[int] = None
    downloads_restored: Optional[int] = None
    users_skipped: bool = False
    downloads_skipped: bool = False


restore_sessions: Dict[int, RestoreSession] = {}


def resolve_backup_target(requester_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Ç, –∫—É–¥–∞ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–∞."""
    return ADMIN_ID_INT or requester_id


async def generate_and_send_backup(target_chat_id: int, caption_prefix: str) -> tuple[bool, Optional[str]]:
    """–°–æ–∑–¥–∞–µ—Ç JSON-–±—ç–∫–∞–ø –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    files = {}
    try:
        files = await asyncio.to_thread(export_backup, db)
    except Exception as exc:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: %s", exc)
        return False, str(exc)

    send_error: Optional[str] = None
    try:
        for table_key, meta in files.items():
            caption = (
                f"{caption_prefix}\n"
                f"–¢–∞–±–ª–∏—Ü–∞: {TABLE_TITLES.get(table_key, table_key)}\n"
                f"–ó–∞–ø–∏—Å–µ–π: {meta['count']}"
            )
            await bot.send_document(
                chat_id=target_chat_id,
                document=FSInputFile(str(meta["path"])),
                caption=caption
            )
    except Exception as exc:
        logging.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: %s", exc)
        send_error = str(exc)
    finally:
        cleanup_backup(files)

    if send_error:
        return False, send_error
    return True, None


async def finalize_prompt(session: RestoreSession, text: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —à–∞–≥–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    if session.prompt_message_id is None:
        return
    try:
        await bot.edit_message_text(
            chat_id=session.chat_id,
            message_id=session.prompt_message_id,
            text=text
        )
    except TelegramBadRequest:
        try:
            await bot.edit_message_reply_markup(
                chat_id=session.chat_id,
                message_id=session.prompt_message_id,
                reply_markup=None
            )
        except TelegramBadRequest:
            pass
    finally:
        session.prompt_message_id = None


async def prompt_current_step(user_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω—É–∂–Ω–æ–≥–æ JSON-—Ñ–∞–π–ª–∞."""
    session = restore_sessions.get(user_id)
    if not session:
        return

    if session.step == "users":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="restore_skip_users")]]
        )
        text = (
            "üìÅ –®–∞–≥ 1 –∏–∑ 2.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π¬ª."
        )
    elif session.step == "downloads":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", callback_data="restore_skip_downloads")]]
        )
        text = (
            "üìÅ –®–∞–≥ 2 –∏–∑ 2.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏–π.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è¬ª."
        )
    else:
        return

    sent = await bot.send_message(
        chat_id=session.chat_id,
        text=text,
        reply_markup=keyboard
    )
    session.prompt_message_id = sent.message_id


def cleanup_restore_session(user_id: int) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."""
    session = restore_sessions.pop(user_id, None)
    if session and session.temp_dir.exists():
        shutil.rmtree(session.temp_dir, ignore_errors=True)


async def finish_restore(user_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."""
    session = restore_sessions.get(user_id)
    if not session:
        return

    summary_lines = ["üóÉ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:"]

    if session.users_skipped:
        summary_lines.append("‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ø—Ä–æ–ø—É—â–µ–Ω–æ, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è–ª–∏—Å—å")
    elif session.users_restored is not None:
        summary_lines.append(f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {session.users_restored} –∑–∞–ø–∏—Å–µ–π")
    else:
        summary_lines.append("‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ")

    if session.downloads_skipped:
        summary_lines.append("‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏—è: –ø—Ä–æ–ø—É—â–µ–Ω–æ, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è–ª–∏—Å—å")
    elif session.downloads_restored is not None:
        summary_lines.append(f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏—è: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {session.downloads_restored} –∑–∞–ø–∏—Å–µ–π")
    else:
        summary_lines.append("‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏—è: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ")

    await bot.send_message(
        chat_id=session.chat_id,
        text="\n".join(summary_lines)
    )
    cleanup_restore_session(user_id)


async def scheduled_backup_job() -> None:
    """–ü–ª–∞–Ω–æ–≤—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±—ç–∫–∞–ø –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    target_chat_id = ADMIN_ID_INT
    if not target_chat_id:
        logging.warning("ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–ª–∞–Ω–æ–≤—ã–π –±—ç–∫–∞–ø.")
        return

    success, error = await generate_and_send_backup(
        target_chat_id,
        "üì¶ –ü–ª–∞–Ω–æ–≤—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –±—ç–∫–∞–ø"
    )

    if success:
        logging.info("–ü–ª–∞–Ω–æ–≤—ã–π –±—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %s.", target_chat_id)
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω–æ–≤—ã–π –±—ç–∫–∞–ø: %s", error or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

# ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
CHANNEL_USERNAME = "@DPAMAQUEEH1" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_LINK = "https://t.me/DPAMAQUEEH1" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int, chat_id: str):
    try:
        member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except TelegramBadRequest as e:
        error_message = str(e).lower()
        if "user not found" in error_message:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {chat_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. {e}")
        elif "chat not found" in error_message or "channel not found" in error_message:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {chat_id}: –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHANNEL_USERNAME. {e}")
        elif "bot is not a member" in error_message or "bot is not a participant" in error_message:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {chat_id}: –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª. {e}")
        elif "not enough rights" in error_message or "user_is_deactivated" in error_message or "USER_ID_INVALID" in error_message:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {chat_id}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. {e}")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {chat_id}: {e}")
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ TelegramBadRequest, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.
        return False
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def send_subscription_message(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
    ])
    await message.answer(
        f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_LINK}\n\n"
        f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@dp.callback_query(F.data == "check_sub")
async def handle_check_subscription_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    is_subscribed = await check_subscription(user_id, CHANNEL_USERNAME)
    if is_subscribed:
        await callback_query.message.edit_text("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        await callback_query.answer()
    else:
        await callback_query.answer("–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def register_user(message: Message):
    user = message.from_user
    db.add_user(
        user_id=user.id,
        username=user.username or "",
        first_name=user.first_name or "",
        last_name=user.last_name or ""
    )
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ —É–∫–∞–∑–∞–Ω ADMIN_ID, –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if ADMIN_ID and str(user.id) == ADMIN_ID and not db.is_admin(user.id):
        db.set_admin(user.id, True)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await register_user(message)
    db.update_user_activity(message.from_user.id)
    
    if not await check_subscription(message.from_user.id, CHANNEL_USERNAME):
        await send_subscription_message(message)
        return
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
        "‚Ä¢ https://music.yandex.ru/album/123456/track/7890123\n"
        "‚Ä¢ https://music.yandex.ru/track/7890123"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(message.from_user.id)
    
    if not await check_subscription(message.from_user.id, CHANNEL_USERNAME):
        await send_subscription_message(message)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    if db.is_admin(message.from_user.id):
        await message.answer(
            "<b>üîß –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/admin_stats - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n"
            "/backup_now - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            "/restore_backup - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-–±—ç–∫–∞–ø–æ–≤\n"
            "/users - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/broadcast [—Ç–µ–∫—Å—Ç] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "/add_admin [id] - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "<b>üìù –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            "<b>üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
            "1. –ù–∞–π–¥–∏—Ç–µ —Ç—Ä–µ–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ\n"
            "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –º–Ω–µ\n"
            "4. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞\n\n"
            "<b>‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π.",
            parse_mode=ParseMode.HTML
        )

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(message.from_user.id)
    
    if not await check_subscription(message.from_user.id, CHANNEL_USERNAME):
        await send_subscription_message(message)
        return
    
    user_id = message.from_user.id
    downloads_count = db.get_user_stats(user_id)
    
    await message.answer(
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"–°–∫–∞—á–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤: {downloads_count}",
        parse_mode=ParseMode.MARKDOWN
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É
def is_yandex_music_link(text: str) -> bool:
    return "music.yandex" in text and ("track" in text or "album" in text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É
@dp.message(F.text.func(is_yandex_music_link))
async def process_music_link(message: Message):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(message.from_user.id)
    
    if not await check_subscription(message.from_user.id, CHANNEL_USERNAME):
        await send_subscription_message(message)
        return
    url = message.text.strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ (—Ç—Ä–µ–∫ –∏–ª–∏ –∞–ª—å–±–æ–º)
    link_info = extract_track_info(url)
    is_album = link_info and link_info[1] == "album"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if is_album:
        processing_msg = await message.answer("üîç –ò—â—É –∞–ª—å–±–æ–º –ø–æ —Å—Å—ã–ª–∫–µ...")
    else:
        processing_msg = await message.answer("üîç –ò—â—É —Ç—Ä–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ...")
    
    try:
        if is_album:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞–ª—å–±–æ–º
            await processing_msg.edit_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –∞–ª—å–±–æ–º... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
            success, album_metadata = await download_album(url, token=YM_TOKEN)
            
            if success and album_metadata:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ
                album_title = album_metadata.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª—å–±–æ–º")
                album_artist = album_metadata.get("artists", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
                tracks_downloaded = album_metadata.get("tracks_downloaded", 0)
                tracks_total = album_metadata.get("tracks_total", 0)
                
                await processing_msg.edit_text(
                    f"‚úÖ –ê–ª—å–±–æ–º —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üéµ {album_artist} - {album_title}\n"
                    f"üìÇ –°–∫–∞—á–∞–Ω–æ {tracks_downloaded} –∏–∑ {tracks_total} —Ç—Ä–µ–∫–æ–≤\n\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç—Ä–µ–∫–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –∞–ª—å–±–æ–º–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                tracks = album_metadata.get("tracks", [])
                sent_count = 0
                total_tracks = len(tracks)
                
                # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–µ–∫–æ–≤
                await message.answer(
                    f"üìÇ –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_tracks} —Ç—Ä–µ–∫–æ–≤.\n"
                    f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
                )
                
                for i, track_info in enumerate(tracks):
                    try:
                        file_path = track_info.get("file_path")
                        title = track_info.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫")
                        performer = track_info.get("artists", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
                        
                        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                            audio = FSInputFile(file_path)
                            await message.answer_audio(
                                audio=audio,
                                caption=f"üéµ {performer} - {title}\n\nüõ†–°–¥–µ–ª–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @YMDownload_bot",
                                title=title,
                                performer=performer
                            )
                            sent_count += 1
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            db.add_download(message.from_user.id, title, performer)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞ —Å–ø–∞–º
                            # –ó–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫
                            if i < total_tracks - 1:
                                await asyncio.sleep(1.5)  # 1.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞ {i+1}: {e}")
                        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ {i+1}: {title}")
                
                # –°–æ–æ–±—â–∞–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                if sent_count == total_tracks:
                    await message.answer(f"‚úÖ –í—Å–µ {sent_count} —Ç—Ä–µ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                else:
                    await message.answer(
                        f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {total_tracks} —Ç—Ä–µ–∫–æ–≤.\n"
                        f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫."
                    )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                await processing_msg.delete()
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞–ª—å–±–æ–º
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞–ª—å–±–æ–º. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n\n"
                    "‚Ä¢ –ê–ª—å–±–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
                    "‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–ª—å–±–æ–º –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
                )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
            temp_path = os.path.join(os.path.dirname(__file__), '—Ç—Ä–µ–∫.mp3')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
            await processing_msg.edit_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
            success, track_metadata = await download_track(url, output_path=temp_path, token=YM_TOKEN)
            
            if success and os.path.exists(temp_path) and os.path.getsize(temp_path) > 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞
                await processing_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                file_size = os.path.getsize(temp_path) / (1024 * 1024)  # —Ä–∞–∑–º–µ—Ä –≤ –ú–ë
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
                audio = FSInputFile(temp_path)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                title = track_metadata.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫") if track_metadata else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫"
                performer = track_metadata.get("artists", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å") if track_metadata else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                
                await message.answer_audio(
                    audio=audio,
                    caption=f"üéµ {performer} - {title}\n\nüõ†–°–¥–µ–ª–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @YMDownload_bot",
                    title=title,
                    performer=performer
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db.add_download(message.from_user.id, title, performer)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                await processing_msg.delete()
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                if os.path.exists(temp_path):
                    try:
                        os.remove(temp_path)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n\n"
                    "‚Ä¢ –¢—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
                    "‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
                )
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        await processing_msg.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("backup_now"))
async def cmd_backup_now(message: Message):
    user_id = message.from_user.id

    if not db.is_admin(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    target_chat_id = resolve_backup_target(user_id)
    status_message = await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")

    success, error = await generate_and_send_backup(
        target_chat_id,
        "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)"
    )

    try:
        if success:
            if target_chat_id == user_id:
                await status_message.edit_text("‚úÖ –ë—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            else:
                await status_message.edit_text("‚úÖ –ë—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: {error}")
    except TelegramBadRequest:
        pass


@dp.message(Command("restore_backup"))
async def cmd_restore_backup(message: Message):
    user_id = message.from_user.id

    if not db.is_admin(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if user_id in restore_sessions:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    temp_dir = Path(tempfile.mkdtemp(prefix="ym_restore_"))
    session = RestoreSession(
        chat_id=message.chat.id,
        step="users",
        temp_dir=temp_dir,
    )
    restore_sessions[user_id] = session

    status_message = await message.answer("‚è≥ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ—ë –≤–∞–º...")

    success, error = await generate_and_send_backup(
        message.from_user.id,
        "üì¶ –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"
    )

    if not success:
        try:
            await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {error}")
        except TelegramBadRequest:
            pass
        cleanup_restore_session(user_id)
        return

    try:
        await status_message.edit_text(
            "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
        )
    except TelegramBadRequest:
        pass

    await prompt_current_step(user_id)


@dp.callback_query(F.data == "restore_skip_users")
async def on_restore_skip_users(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if not db.is_admin(user_id):
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    session = restore_sessions.get(user_id)
    if not session or session.step != "users":
        await callback_query.answer("–°–µ–π—á–∞—Å –Ω–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å.", show_alert=True)
        return

    session.users_skipped = True
    session.users_restored = None

    await finalize_prompt(session, "‚è≠Ô∏è –®–∞–≥ 1: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    await callback_query.answer("–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω.")
    await callback_query.message.answer("‚è≠Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

    session.step = "downloads"
    await prompt_current_step(user_id)


@dp.callback_query(F.data == "restore_skip_downloads")
async def on_restore_skip_downloads(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if not db.is_admin(user_id):
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    session = restore_sessions.get(user_id)
    if not session or session.step != "downloads":
        await callback_query.answer("–°–µ–π—á–∞—Å –Ω–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å.", show_alert=True)
        return

    session.downloads_skipped = True
    session.downloads_restored = None

    await finalize_prompt(session, "‚è≠Ô∏è –®–∞–≥ 2: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    await callback_query.answer("–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω.")
    await callback_query.message.answer("‚è≠Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

    session.step = "done"
    await finish_restore(user_id)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Command("admin_stats"))
async def cmd_admin_stats(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_total_stats()
    
    await message.answer(
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"üéµ –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {stats.get('total_downloads', 0)}\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_users_week', 0)}",
        parse_mode=ParseMode.MARKDOWN
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast)
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
        )
        return
    
    broadcast_text = command_parts[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.get_all_users()
    
    if not users:
        await message.answer("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    status_message = await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    sent_count = 0
    error_count = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user in users:
        try:
            await bot.send_message(
                chat_id=user['user_id'],
                text=f"üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n{broadcast_text}",
                parse_mode=ParseMode.MARKDOWN
            )
            sent_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if sent_count % 10 == 0:
                await status_message.edit_text(
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(users)} —Å–æ–æ–±—â–µ–Ω–∏–π..."
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞ —Å–ø–∞–º
            await asyncio.sleep(0.1)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            error_count += 1
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await status_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Command("add_admin"))
async def cmd_add_admin(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_admin)
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /add_admin 123456789"
        )
        return
    
    try:
        new_admin_id = int(command_parts[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = db.get_user(new_admin_id)
    if not user:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        )
        return
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if db.set_admin(new_admin_id, True):
        username = user['username'] or f"ID: {new_admin_id}"
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Command("users"))
async def cmd_users(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_total_stats()
    
    await message.answer(
        f"üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_users_week', 0)}",
        parse_mode=ParseMode.MARKDOWN
    )

@dp.message(F.document)
async def handle_backup_document(message: Message):
    user_id = message.from_user.id
    session = restore_sessions.get(user_id)

    if not session or session.step not in {"users", "downloads"}:
        return

    if not db.is_admin(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        return

    file_path = session.temp_dir / f"{session.step}.json"
    processing_msg = await message.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")

    try:
        await message.document.download(destination=file_path)
        rows = load_backup_file(file_path, session.step)

        if session.step == "users":
            restored = await asyncio.to_thread(restore_users, db, rows)
            session.users_restored = restored
            session.users_skipped = False
            await finalize_prompt(session, f"‚úÖ –®–∞–≥ 1 –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {restored}")
            await processing_msg.edit_text(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({restored}).")
            session.step = "downloads"
            await prompt_current_step(user_id)
        else:
            restored = await asyncio.to_thread(restore_downloads, db, rows)
            session.downloads_restored = restored
            session.downloads_skipped = False
            await finalize_prompt(session, f"‚úÖ –®–∞–≥ 2 –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {restored}")
            await processing_msg.edit_text(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({restored}).")
            session.step = "done"
            await finish_restore(user_id)
    except BackupError as exc:
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
    except Exception as exc:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {exc}")
        await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
    finally:
        try:
            if file_path.exists():
                file_path.unlink()
        except OSError:
            pass

    return


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo(message: Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
    await register_user(message)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(message.from_user.id)
    
    if not await check_subscription(message.from_user.id, CHANNEL_USERNAME):
        await send_subscription_message(message)
        return
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: https://music.yandex.ru/album/123456/track/7890123\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
    )

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    backup_tz = resolve_timezone(BACKUP_TZ)
    scheduler = AsyncIOScheduler(timezone=backup_tz)
    trigger, cron_expr = build_backup_trigger(backup_tz)

    scheduler.add_job(
        scheduled_backup_job,
        trigger=trigger,
        id="weekly_backup",
        max_instances=1,
        coalesce=True,
        misfire_grace_time=3600,
    )
    scheduler.start()

    tz_name = getattr(backup_tz, "key", str(backup_tz))
    logging.info(
        "–ü–ª–∞–Ω–æ–≤—ã–π –±—ç–∫–∞–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: BACKUP_CRON='%s', BACKUP_TZ='%s'.",
        cron_expr,
        tz_name,
    )

    try:
        await dp.start_polling(bot)
    finally:
        scheduler.shutdown(wait=False)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
